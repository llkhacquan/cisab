name: Go lint

on:
  push:
    branches:
      - "master"
      - "develop"
  pull_request:
    branches:
      - "master"
      - "develop"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  pre_job:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: "same_content_newer"
          skip_after_successful_duplicate: "true"
          paths_ignore: '["**/README.md", "**/docs/**", ".github/**"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  pre-commit:
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
      - uses: pre-commit/action@v3.0.1

  lint:
    name: lint
    runs-on: ubuntu-latest
    # this helps reduce the number of jobs that run concurrently
    needs: [ pre_job ]
    if: needs.pre_job.outputs.should_skip != 'true'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
          check-latest: true
          cache: false
          cache-dependency-path: |
            go.sum
            go.mod
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          only-new-issues: false
          skip-cache: true
          skip-save-cache: true
          working-directory: .
          args: --timeout=10m
      - name: Go fmt
        run: |
          files_to_fix=$(go fmt ./...)
          if test -z "$files_to_fix"
          then
            echo "all good"
          else
            echo "please run go fmt on file(s):"
            echo $files_to_fix
            exit 1
          fi
      - name: run goimports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          # find all go files except *pb.go and run goimports on them
          files_to_fix=$(find . -type f -name "*.go" ! -name "*pb.go" -exec goimports -d {} \;)
          if test -z "$files_to_fix"
            then
            echo "all good"
          else
            echo "please run goimports"
            exit 1
          fi
        working-directory: .
